一、泛型：
jdk1.5出现的安全机制

二、好处：
1.将运行时期的问题可能抛出异常ClassCastException转到了编译时期
2.避免了强制转换的麻烦

三、什么时候用？
 <>什么时候用？当操作的引用数据类型不确定时，就使用<>，将要操作的引用数据类型传入即可
其实<>就是一个用于接收具体引用数据类型的参数范围
在程序中，只要用到带有<>的类或者接口，就要明确传入的具体引用数据类型

四、一些说明：
1.泛型技术是给编译器使用的技术，用于编译时期，确保了类型的安全

2.运行时会将泛型去掉，生成class文件中是不带有泛型的（跟源代码不加泛型编译出来的一样），这个称为泛型的擦除
	为什么要擦除呢？为了兼容运行时的类加载器，原来的类加载器是不识别泛型机制的

3.泛型的补偿：在运行时，通过获取元素的类型进行转换动作，不用使用者再强制转换了
	也就是说，泛型只是一个检查机制，当带有泛型机制的集合添加元素的时候，元素还是会自动提升为Object类型
	按理说，当取出的时候应当转换为原来的类型才能使用，但是因为有了泛型，运行时会自动补偿，通过getClass
	.getName()来获取原来的类名，然后自动转换为原来的类型，无需使用者强制转换

五、常用泛型应用：
1.集合：凡是集合，都应该加上泛型
2.迭代器：得带起也需要加泛型，以明确迭代的类型和迭代时自动转换为原来的类型
3.比较器接口：Comparator接口：此接口也需要泛型，以明确其其抽象比较方法Compare比较的对象
