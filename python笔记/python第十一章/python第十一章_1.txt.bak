python中的枚举类型：
	在python中定义一个枚举类，可以通过如下方式：

		from enum import Enum
		class VIP(Enum):
		    YELLOW = 1
		    GREEN = 2
		    BLACK = 3
		    RED = 4

	枚举用法：
		VIP.GREEN：枚举类型的值
		VIP.GREEN.value：返回枚举对应的值
		VIP.GREEN.name：返回枚举类型的名字（字符串）
		VIP(1)：访问VIP枚举类中值为1的枚举

	枚举的比较：
		可用is进行身份比较或==进行等值比较，等值比较不会根据枚举值来比较

	说明：
		枚举中的枚举类型名字不能相同，但是枚举值可以相同，如果两个枚举的枚举值相同，那么后面会被
			视为前面的别名，默认使用的是前面的那个
		加上注解@unique之后，枚举值也不允许相同

闭包：
	概念：闭包是函数和环境变量形成的一个抽象整体
	现象：
		def curve_pre():
		    a = 25
		    def curev(x):
		        return a*x*x
		    return curve
		a = 10
		f = curve_pre()
		print(f(2))		#打印结果是100，因为f所取的a值是在curve_pre函数中定义的，而不是外部
						定义的
		print(f.__closure__)	#打印函数闭包换进变量的序列

	作用：
		保护了函数执行需要的环境变量

定义全局变量：
	global xxx
	全局变量不会随着函数的出栈而消失
	作用：
		python中在函数中等号左边出现的的变量都会被当做局部变量，若要引用块之外的变量并将其放于等号
		左边，那么可以用global关键字来声明，使该变量引用的是块之外的变量

定义非局部变量：
	nonlocal xxx
	非全局变量类似于闭包中的环境变量，可以保存上次执行结果，存在于__closure__中
	作用：
		使用nonlocal关键字声明的变量，会保存闭包中同名环境变量的值，并将其替换

闭包是函数式编程的一个体现