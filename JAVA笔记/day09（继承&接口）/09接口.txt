一、
当一个抽象类中的方法都是抽象的时候，这时候可以将该抽象类用
另一种形式定义和表示，就是 接口 interface
其定义形式如下：
interface Demo
{
	//成员
}
也就是说，定义接口的关键字不是class，而是interface，但是编译接口生成的字节码文件还是.class

二、接口当中常见的成员：（而且这些成员都有固定的修饰符）
1.全局常量：public static final

2.抽象方法：public abstract

由此得出结论：接口中的成员都是公共的权限
接口中的成员若不显示的用固定修饰符来修饰，那么编译的时候会自动加上

三、类与接口之间的联系：
1.类与接口之间的联系是  实现 ，用关键字 implements 来表示，例如
class DemoImpl implements Demo
{
}
因此，某个接口的实现类类名一般是接口名加Impl

四、一些说明：
1.接口不能实例化
只能由实现了接口的子类并覆盖了接口中的所有抽象方法后，该子类才可以实例化
否则，这个子类就是一个抽象类

五、接口――多实现
1.java中不支持多继承，但是支持多实现

2.多实现的形式如下：
class Test implements A,Z
{
}

3.当一个类同时实现两个接口时，两接口不能出现函数名相同参数相同返回值类型不同的方法
否则在类中无法同事实现两个方法

4.接口的出现避免了单继承的局限性
一个类只能继承一个父类，却可以实现多个接口，例如：
class Test extends Q implements A,Z
{
}

5.接口与接口之间是继承关系，例如
interface QQ extends CC,GG
{
}
而且需要说明的是：接口与接口之间支持多继承