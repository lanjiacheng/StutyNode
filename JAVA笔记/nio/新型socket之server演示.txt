package selector;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectableChannel;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.Set;

public class Server {

	public static void main(String[] args) throws Exception {
		// 打开选择器
		Selector selector = Selector.open();
		// 打开服务器通道
		ServerSocketChannel ssc = ServerSocketChannel.open();
		// 绑定端口
		ssc.bind(new InetSocketAddress(8888));
		// 设置非堵塞模式
		ssc.configureBlocking(false);
		// 将服务端通道注册到选择器上，就是存入选择器内部的集合中
		ssc.register(selector, SelectionKey.OP_ACCEPT);
		while (true) {
			// 选择器进行挑选，选出发生了感兴趣的事件的通道的集合
			selector.select();
			// 获取本次挑选出来的key集合
			Set<SelectionKey> keys = selector.selectedKeys();
			// 获取集合和的迭代器，方便于迭代集合
			Iterator<SelectionKey> it = keys.iterator();
			// 迭代集合，取出集合中的key并对不同key进行相应处理
			while (it.hasNext()) {
				SelectionKey key = it.next();
				// 判断如果是可接收的
				if (key.isAcceptable()) {
					SocketChannel sc = ssc.accept();
					if (sc != null) {
						// 获取了客户端的通道，还要把它设置为非堵塞模式
						sc.configureBlocking(false);
						sc.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);
						System.out.println("one client is connecting !");
					}
				}
				if (key.isWritable()) {
					System.out.println("可写，但不一定写");
					SocketChannel sc = (SocketChannel) key.channel();
					ByteBuffer buf = ByteBuffer.allocate(1024);
					sc.read(buf);
					if (buf.remaining() != buf.capacity()) {
						byte[] bs = new byte[4];
						buf.flip();
						buf.get(bs);
						System.out.println(new String(bs));
						it.remove();
						System.exit(-1);
					}
				}
				if (key.isReadable()) {
					System.out.println("可读，但没读");
				}
			}

		}

	}

}

/*
 * 总结： 每个客户端一旦连接，就具备可读可写性，在挑选时，只要注册过，只要具备可读性或可写性，就算没读没写，也能被挑选出来 因为有它具备了可读性或可写性
 * 被注册的通道必须设置为非堵塞模式
 */
