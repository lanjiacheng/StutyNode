一、抽象类的特点：
1.方法声明没有实现时（如abstract void cry();），该方法就是抽象方法，需要被abstract修饰
	抽象方法必须定义在抽象类中，就是说该类也必须被abstract修饰
2.抽象类不可以被实例化，因为，调用抽象类方法没有意义
3.抽象类必须有1个子类覆盖了所有抽象方法后，该子类才可以实例化
	否则，这个子类还是抽象类，抽象方法必须在抽象类定义，但是非抽象方法也可以在抽象类
	定义

二、关于抽象类的几个说明：
1.抽象类当中有构造函数吗？
	有，用于子类对象进行初始化

2.抽象类可以不定义抽象方法吗？
	可以，但是很少见，目的就是不让该类创建对象。AWT的适配器对象就是这种类。
	通常这个类中的方法有方法体，但是却没有内容。

3.abstract关键字不能和哪些关键字共存？
	private 不行，因为：private修饰的方法不能被继承，既然不能继承，那么也不可能覆盖
		不能覆盖，那么抽象方法无法实现，所以不能共存
	static 不行，因为：static修饰的方法不需要建立对象就可以执行，如果执行抽象类中的抽象方法，那么
		没有意义，所以不能共存

	final 不行，因为：final修饰的方法不能被覆盖，而abstract修饰的方法一定要被覆盖
		二者矛盾，不能共存

4.抽象类和一般类的异同点：
相同点：
	抽象类和一般类都是用来描述事物的，都在内部定义了成员
不同点：
	（1）一般类有足够的信息描述事物
		抽象类描述事物信息可能不足
	（2）一般类中不能定义抽象方法，只能定义非抽象方法
		抽象类可以定义抽象方法，同时也可以定义非抽象方法
	（3）一般类可以被实例化，
		抽象类不能被实例化

5.抽象类一定是个父类吗？
	是的，因为需要子类覆盖其方法以后才能对子类实例化