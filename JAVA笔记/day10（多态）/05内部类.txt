一、内部类概述：
将一个类定义在另一个类里面，对里面那个类就称为内部类（内置类，嵌套类）

二、内部类访问特点：
1.内部类可以直接访问外部类中的成员，包括私有成员
2.而外部类要访问内部类成员就必须建立内部类的对象

三、编译内部类：
内部类经编译后也会生成字节码文件，并且该文件名是  外部类$内部类.class

四、内部类的作用：
一般用于类的设计
分析事物时，发现该事物描述中还有事物，而且这个事物还在访问被描述事物的内容
这时就是还有的事物定义成内部类来描述

五、内部类修饰符：
内部类就相当于外部类的一个成员，它是可以被修饰符修饰的

如果内部类被private修饰，那么在其他类中将无法访问该内部类，也无法创建该内部类的对象

如果内部类被static修饰，那么就可以直接通过外部类名来调用，例如：
Outer.Inner in=new Outer.Inner();
被static修饰的内部类不能直接访问非静态的外部成员变量

如果内部类中定义了静态成员，那么内部类也一定要是静态的

六、建立内部类对象的格式：
例如：
Outer.Inner in=new Outer().new Inter();（此处可以看成先建立外部类对象，再建立内部类对象）

七、内部类细节：
一个例子：
class Outer
{
	int num=3;
	class Inner
	{
		int num=4;
		void show()
		{
			int num=5;
			System.out.println(Outer.this.num);//内部类若要引用同名的外部类成								员变量，可以如此引用
		}
	}
}

八、局部内部类：
被定义在成员方法中的类叫做局部内部类
局部内部类只能访问该成员方法中被final修饰的变量
原因：方法执行完就弹栈，而对象还还留在堆中，因此方法弹栈后对象不能再访问，所以要final修饰