两段代码各执行完需要各两不同个锁，两个线程去执行两段不同代码时，线程1拿到了线
程2执行完代码需要的锁，线程2又拿到了线程1执行完代码需要的锁，那么两个线程都不能
执行完各自的代码，也不能释放各自拿到的锁，那么就会发生死锁现象，死锁实例如下：

class Test implements Runnable
{
	private boolean flag;
	Test(boolean flag)
	{
		this.flag=flag;
	}
	public void run()
	{
		if(flag)
		{
			synchronized(MyLock.locka)
			{
				System.out.println("if locka");
				synchronized(MyLock.lockb)
				{
					System.out.println("if lockb");
				}
			}
		}
		else 
		{
			synchronized(MyLock.lockb)
			{
				System.out.println("else lockb");
				synchronized(MyLock.locka)
				{
					System.out.println("else locka");
				}
			}
		}
	}
}

class MyLock
{
	public static final Object locka=new Object();
	public static final Object lockb=new Object();
}

class Demo
{
	public static void main(String[] args)
	{
		Test t1=new Test(true);
		Test t2=new Test(false);
		Thread th1=new Thread(t1);
		Thread th2=new Thread(t2);
		th1.start();
		th2.start();
	}
}