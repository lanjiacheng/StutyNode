一、线程安全问题产生的原因：

1.多个线程在操作共享数据
2.操作共享数据的代码有多条

当一个线程在执行操作共享数据的多条代码过程中，其他线程参与了运算
就会导致线程安全问题的产生

二、解决：
1.解决思路：
就是讲多条操作共享数据的线程代码封装起来，当有线程执行这些代码时，
其他线程不可以参与运算。
必须要当前线程把这些代码都执行完，其他线程才可以参与运算

2.解决办法：
在java中，用同步代码块就可以解决这个问题。

同步代码块格式：
synchronized(对象)		//对象一般可用Object类建立即可
{
	//需要被同步的代码
}







多线程安全隐患实例：
/*
一个实例：
卖票问题，多个线程卖同一推票的时候，有代码如下：
*/

class Ticket implements Runnable
{
	private int num=10;
	public void run()
	{
		while(true)
		{
			if(num>0)		//当多个线程执行这个方法时，如果其中一个线程判断完if条件，还没执行
							//输出语句，cpu执行权就转到另外一个线程上，那么另外一个线程就会对
							//if语句里的内容进行修改，当cpu执行权转回到原来的线程时，执行输出语句
							//那么输出内容就会和预期的不一样，就是存在安全隐患
				System.out.println(Thread.currentThread().getName()+"..."+num--);
			else
				break;
		}
	}
}

