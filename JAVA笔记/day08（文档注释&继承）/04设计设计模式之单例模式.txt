一、设计模式：
对问题行之有效的解决方法，其实它是一种思想

二、单例设计模式：
1.解决的问题：
就是可以保证一个类在内存中的对象唯一性
	必须对多个程序使用同一个配置信息对象时，就需要保证该对象的唯一性

2.如何保证对象的唯一性呢：
（1）不允许其他程序用new创建该类对象
（2）在该类创建一个本类实例
（3）对外提供一个方法让其他程序可以获取该对象

3.步骤：
（1）私有化该类对象
（2）通过new在本类中创建一个本类的对象
（3）定义一个共有的方法，将创建的对象返回

4.示例：
class Demo
{
	public static void main(String[] args) 
	{
		Test t1=Test.getInstance();
		Test t2=Test.getInstance();
		t1.setNum(10);
		t2.setNum(20);
		System.out.println(t1.getNum());
		System.out.println(t2.getNum());
	}
}
class Test
{
	private static Test t=new Test();
	private Test(){};		//将构造方法私有化
	public static Test getInstance()		//设置一个获取该类唯一对象的公共方法
	{
		return t;
	}
	public void setNum(int num)			//设置改变静态变量的方法
	{
		this.num=num;
	}
	public int getNum()			//设置获取静态变量的方法
	{
		return num;
	}
}
