循环语句：
	while: 或 while: else:
	for value in list:
	循环控制：
		continue：继续（正常结束，会执行循环之后的else）
		break：跳出（非正常结束不会执行循环之后的else）
	一种简洁循环固定次数方式：
		for x in range(0,10): ：循环10次，每次x的值分别是0到9（包含头不包含尾）

常用函数：
	print(x,end=",")：打印x并以","结尾
	range(10,0,-2)：生成一个10到0每个元素递增-2的序列（且包含头不包含尾）

python项目组织结构：
	包：
		一个包可以包括多个模块，一个包在磁盘中就是一个文件夹
		创建一个文件夹，然后在文件夹下创建一个__init__.py的文件（模块），
		这个文件夹就被识别为包（没有改文件也可），同时__init__.py也是一个可写代码的模块，要调用
		该模块，直接用包名即可
	模块
	类
	函数变量

导入：
	import语句，也可以用import x as y，如此可通过使用y代替x
	使用import导入的是模块,若访问模块下的函数和变量，要使用模块里面的内容，需要用命名空间指定
	from x import *：导入x包下所有模块（前提是在__all__中包含的）

	from x.y import z语句，可以指定导入哪个模块中的函数或变量z

	当导入一个模块，就会直接执行模块里面的内容，所以不能循环导包
	包和模块是不会被重复导入的


模块内置属性（限定符）：
	__all__ = ['a','c']：定义可以被其他模块引用的变量a和b

一行当多行书写，可用：
	末尾加/ 或 ()括起需要换行部分

__init__.py：
	说明：
		导入一个包的模块或模块里的函数变量时，__init__.py文件里面的代码会首先自动执行
	作用：
		1、在__init__.py里面写入__all__ = ['x','x','x']语句来定义包下哪些模块可以被引用
		2、在__init__.py里面用import语句导入一些常用模块，然后在其他模块中即可直接通过
			导入这个包，然后在通过这个包的命名空间来调用常用模块
		
	如何导入__init__.py文件：
		直接导入改文件所在包，就是导入该文件


-----------------------------------------------------------------------------------------------------
关于导入引用的总结：
	import xx语句只能导入模块，并且导入模块的包也会被导入，如此即可直接调用该包下的__init__
		导入之后的模块需要用命名空间来调用

	from xx import xx语句可以导入模块或模块的内容（变量函数类），而且导入之后直接用导入的变量名、类名、
		模块名来调用，不需要命名空间，但是只能使用导入的特定的内容，不能使用其他的

	__all__用法：
		放在包下的__init__.py文件中，定义包下对外开放模块
		放在模块里，定义模块内对外开放的成员
		只有使用from xx import *语句来导入的时候__all__属性才会生效，否则不包含在__all__里面的
			模块或成员还可以通过制定命名空间来导入

	python中的导包是通过执行语句来导的，并且执行的导包语句是相对于程序入口文件的位置来寻找包的，因此
		导包时尽量使用相对于入口文件位置的命名空间来导包，否则执行到导包文件时，很可能报错（找不到）
